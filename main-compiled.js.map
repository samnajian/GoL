{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["\"use strict\";\n\n(function(doc, win){\n\n    function Cell( x, y ){\n        let cell_width = 10,\n            node = doc.createElement(\"span\"),\n            state = false,\n            dead_color = \"#ccc\",\n            alive_color = \"green\";\n\n\n        (function(){ // init cell\n\n            if( [10].indexOf( y ) !== -1 && [6, 7, 8].indexOf( x ) !== -1 ){\n                state = true;\n            }\n\n            if( [11].indexOf( y ) !== -1 && [8].indexOf( x ) !== -1 ){\n                state = true;\n            }\n\n            if( [12].indexOf( y ) !== -1 && [7].indexOf( x ) !== -1 ){\n                state = true;\n            }\n\n            node.style.width = cell_width + \"px\";\n            node.style.height = cell_width + \"px\";\n            node.style.display = \"inline-block\";\n            node.style.border = \"1px solid #fff\";\n            node.style.margin = 0;\n            node.style.padding = 0;\n            node.style.float = \"left\";\n\n            if( state )\n                node.style.backgroundColor = alive_color;\n            else\n                node.style.backgroundColor = dead_color;\n        }());\n\n\n        /**\n         * Counts live neighbors\n         *\n         * @param cells\n         * @returns {number}\n         */\n        const count_alive_neighbors = ( cells ) => {\n            let count = 0,\n                x_count = cells.length - 1; //  given cell height and width are the same this should work for the y as well\n\n            if (y < x_count && cells[x][ y + 1 ].state ) // cell on top\n                    count++;\n\n            if ( 0 !== y && cells[x][ y - 1 ].state ) // cell on bottom\n                count++;\n\n            if (0 !== x &&  cells[x - 1][ y ].state ) // cell on left\n                count++;\n\n            if ( x < x_count && cells[ x + 1 ][ y ].state ) //  cell on right\n                count++;\n\n\n            if ( 0 !== y && x < x_count && cells[ x + 1 ][ y - 1 ].state ) // cell bottom right\n                count++;\n\n            if ( 0 !== x && 0 !== y && cells[ x - 1 ][ y - 1 ].state ) // cell on the bottom left\n                count++;\n\n            if ( x < x_count && y < x_count && cells[ x + 1 ][ y + 1 ].state ) // cell top right\n                count++;\n\n            if (  0 !== x && y < x_count && cells[ x - 1 ][ y + 1 ].state ) // cell on top left\n                count++;\n\n\n            return count;\n        };\n\n        /**\n         * Returns new state of cell\n         *\n         * @param cells\n         * @returns {boolean}\n         */\n        const get_new_state = ( cells ) => {\n            let count = count_alive_neighbors( cells );\n\n            //count = Math.random() > 0.5 ? 1 : 3;\n            if (state && count < 2) //  Live cell with less than 2 live cells\n                state = false;\n\n            if ( state &&  [2, 3].indexOf( count ) !== -1 ) //  Live cell with 2 or 3 live neighbors\n                state = true;\n\n            if (state && count > 3) //  Live cell with more than 3 live neighbors\n                state = false;\n\n            if (!state && count == 3) //  Dead cell with exactly  3 live neighbors\n                state = true;\n\n\n            return state;\n        };\n\n        /**\n         * Updates the cell state\n         *\n         * @param cells\n         * @returns {update}\n         */\n        const update = ( cells ) => {\n\n            if( get_new_state( cells ) )\n                node.style.backgroundColor = alive_color;\n            else\n                node.style.backgroundColor = dead_color;\n\n            return node;\n        };\n\n        return {\n            state: state,\n            update: update,\n            node: node\n        };\n    }\n\n\n    function Grid(cells){\n        let grid = doc.querySelector(\"#grid\"),\n            cell_width = 10;\n\n\n        /**\n         * Populates cells array\n         *\n         * @param width\n         * @param height\n         */\n        const init_cells = (width, height) => {\n            width = width / cell_width;\n            height = height / cell_width;\n\n            for( let w = 0; w < width; w++ ){\n                for( let h = 0; h < height; h++ ){\n                    cells[w] = cells[w] || [];\n                    cells[w][h] = new Cell(w, h);\n\n                }\n            }\n\n        };\n\n        /**\n         * Initial draw of grid with default alive cells\n         *\n         * @param width\n         * @param height\n         */\n        const initial_draw = (width, height) => {\n            grid.innerHTML = \"\";\n            grid.style.width =  width + ( width * 2 / cell_width ) - 3 + \"px\";\n            grid.style.height =  height + ( height * 2 / cell_width ) - 3 + \"px\";\n\n            for( let x = 0; x < cells.length; x++ ){\n                for( let y = 0; y < cells.length; y++ ){\n                    grid.appendChild( cells[x][y].node );\n                }\n            }\n\n        };\n\n        /**\n         * Updates cells and then the DOM\n         *\n         */\n        const update = () => {\n            grid.innerHTML = \"\"; // remove prev state from DOM\n\n            for( let x = 0; x < cells.length; x++ ){\n                for( let y = 0; y < cells.length; y++ ){\n                    grid.appendChild( cells[x][y].update(cells) );\n                }\n            }\n\n        };\n\n        /**\n         * Initializes the grid\n         *\n         * @param width\n         * @param height\n         */\n        const init = ( width, height ) => {\n            init_cells(width, height);\n            initial_draw(width, height);\n        };\n\n        return {\n            init: init,\n            update: update\n        };\n    }\n\n    function Game( width, height  ){\n        let cells = [],\n            grid = new Grid( cells );\n\n        // init\n        grid.init( width, height );\n\n        // update on intervals\n        setInterval(grid.update, 600);\n    }\n\n\n     new Game(200, 200);\n\n\n}(document, window));"]}