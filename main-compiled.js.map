{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["\"use strict\";\n\n(function(doc, win){\n\n    function Cell( x, y ){\n        let cell_width = 10,\n            node = doc.createElement(\"span\"),\n            state = false,\n            dead_color = \"#ccc\";\n\n\n        node.style.width = cell_width + \"px\";\n        node.style.height = cell_width + \"px\";\n        node.style.display = \"inline-block\";\n        node.style.border = \"1px solid #fff\";\n        node.style.margin = 0;\n        node.style.padding = 0;\n        node.style.float = \"left\";\n        node.style.boxSizing = \"border-box\";\n        node.style.backgroundColor = dead_color;\n\n        return {\n            state: state,\n            node: node\n        };\n    }\n\n\n    function Grid(cells){\n        let grid = doc.querySelector(\"#grid\"),\n            cell_width = 10,\n            dead_color = \"#ccc\",\n            alive_color = \"green\",\n            next_gen;\n\n\n        /**\n         * Populates cells array\n         *\n         * @param width\n         * @param height\n         */\n        const init_cells = (width, height) => {\n            width = width / cell_width;\n            height = height / cell_width;\n\n            for( let y = 0; y < width; y++ ){\n                for( let x = 0; x < height; x++ ){\n                    cells[x] = cells[x] || [];\n                    let cell = Cell(x, y);\n                    cell.node.addEventListener(\"click\", (e) => {\n\n                        (function(cell){\n                            cell.state = true;\n                            cell.node.style.backgroundColor = alive_color;\n                        }(cell));\n\n                    });\n                    cells[x][y] = cell ;\n\n                }\n            }\n\n        };\n\n        /**\n         * Initial draw of grid with default alive cells\n         *\n         * @param width\n         * @param height\n         */\n        const initial_draw = (width, height) => {\n            grid.innerHTML = \"\";\n            grid.style.width =  width   + \"px\";\n            grid.style.height =  height + \"px\";\n\n            for( let x = 0; x < cells.length; x++ ){\n                for( let y = 0; y < cells.length; y++ ){\n                    grid.appendChild( cells[x][y].node );\n                }\n            }\n\n        };\n\n        /**\n         * Updates cells and then the DOM\n         *\n         */\n        const update = () => {\n            grid.innerHTML = \"\"; // remove prev state from DOM\n            next_gen = [];\n            for( let y = 0; y < cells.length; y++ ){\n                for( let x = 0; x < cells.length; x++ ){\n                    grid.appendChild( update_cell(x, y).node );\n                }\n            }\n\n            cells = next_gen;\n        };\n\n        /**\n         * Initializes the grid\n         *\n         * @param width\n         * @param height\n         */\n        const init = ( width, height ) => {\n            init_cells(width, height);\n            initial_draw(width, height);\n        };\n\n\n        /**\n         * Counts live neighbors\n         *\n         * @param cells\n         * @returns {number}\n         */\n        const count_alive_neighbors = ( x, y ) => {\n            let count = 0,\n                x_count = cells.length - 1; //  given cell height and width are the same this should work for the y as well\n\n            if (y < x_count && cells[x][ y + 1 ].state ) // cell on top\n                count++;\n\n            if ( 0 !== y && cells[x][ y - 1 ].state ) // cell on bottom\n                count++;\n\n            if (0 !== x &&  cells[x - 1][ y ].state ) // cell on left\n                count++;\n\n            if ( x < x_count && cells[ x + 1 ][ y ].state ) //  cell on right\n                count++;\n\n\n            if ( 0 !== y && x < x_count && cells[ x + 1 ][ y - 1 ].state ) // cell bottom right\n                count++;\n\n            if ( 0 !== x && 0 !== y && cells[ x - 1 ][ y - 1 ].state ) // cell on the bottom left\n                count++;\n\n            if ( x < x_count && y < x_count && cells[ x + 1 ][ y + 1 ].state ) // cell top right\n                count++;\n\n            if (  0 !== x && y < x_count && cells[ x - 1 ][ y + 1 ].state ) // cell on top left\n                count++;\n\n\n            return count;\n        };\n\n        /**\n         * Returns new state of cell\n         *\n         * @param cells\n         * @returns {boolean}\n         */\n        const get_new_state = ( x, y, cell ) => {\n            let count = count_alive_neighbors( x, y ),\n                state = cell.state;\n\n            if (state && count < 2) //  Live cell with less than 2 live cells\n                state = false;\n\n            if ( state &&  [2, 3].indexOf( count ) !== -1 ) //  Live cell with 2 or 3 live neighbors\n                state = true;\n\n            if (state && count > 3) //  Live cell with more than 3 live neighbors\n                state = false;\n\n            if (!state && count == 3) //  Dead cell with exactly  3 live neighbors\n                state = true;\n\n\n            return state;\n        };\n\n        /**\n         * Updates the cell state\n         *\n         * @param cells\n         * @returns {update}\n         */\n        const update_cell = ( x, y ) => {\n            next_gen[x] = next_gen[x] || [];\n            next_gen[x][y] = Cell(x, y);\n\n            next_gen[x][y].state = get_new_state( x, y, next_gen[x][y] );\n            if( next_gen[x][y] .state )\n                next_gen[x][y] .node.style.backgroundColor = alive_color;\n            else\n                next_gen[x][y] .node.style.backgroundColor = dead_color;\n\n            return next_gen[x][y];\n        };\n\n\n        return {\n            init: init,\n            update: update\n        };\n    }\n\n\n    function Game( width, height  ){\n        let cells = [],\n            grid = new Grid( cells ),\n            timer_handle;\n\n        // init\n        grid.init( width, height );\n\n\n\n        doc.querySelector(\"#stop\").addEventListener(\"click\", function(){\n            if( timer_handle )\n                clearInterval( timer_handle );\n        });\n\n        doc.querySelector(\"#start\").addEventListener(\"click\", function(){\n            // update on intervals\n            timer_handle = setInterval(grid.update, 600);\n        });\n\n    }\n\n\n     new Game(200, 200);\n\n\n}(document, window));"]}